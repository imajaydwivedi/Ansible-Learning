---
- name: Start tasks/main.yml
  ansible.builtin.debug:
    msg: "Start tasks/main.yml"

- name: Include defaults/dba_vars.yml
  ansible.builtin.include_vars:
    file: defaults/dba_vars.yml

- name: Check inventory_hostname/ansible_host
  ansible.builtin.debug:
    msg: "inventory_hostname: [{{inventory_hostname}}], ansible_host: [{{ansible_host}}]"

- name: Check ansible_facts
  ansible.builtin.debug:
    msg: "ansible_hostname: [{{ansible_hostname}}], ansible_fqdn: [{{ansible_fqdn}}], ansible_nodename: [{{ansible_nodename}}]"

- name: Change hostname to fqdn
  ansible.builtin.command: >
    sudo hostnamectl set-hostname {{ansible_hostname}}.{{ad_domain}}
  when: ad_domain not in ansible_fqdn

# ansible -i hosts.yml pgpoc -m setup -a "filter=ansible_interfaces"
# ansible -i hosts.yml pgpoc -m setup -a "filter=ansible_enp1s0"

# - name: Install python of correct version
#   ansible.builtin.package:
#     name: "{{ python_version }}"
#     state: present
#   when: python_version is defined

- name: Find interface names for inet1
  set_fact:
    inet1_interface: >-
      {{
        (
          ansible_facts
          | dict2items
          | selectattr('value.ipv4.network', 'defined')
          | selectattr('value.ipv4.network', 'equalto', inet1_network_ip)
          | map(attribute='key')
        ) | first | default('')
      }}

- name: Find interface names for inet2
  set_fact:
    inet2_interface: >-
      {{
        (
          ansible_facts
          | dict2items
          | selectattr('value.ipv4.network', 'defined')
          | selectattr('value.ipv4.network', 'equalto', inet2_network_ip)
          | map(attribute='key')
        ) | first | default('')
      }}

- name: Print interfaces and network ips
  ansible.builtin.debug:
    msg: >-
      [{{inet1_interface}}]=> {{inet1_network_ip}}
      {%- if inet2_interface is defined and inet2_interface %}
      , [{{inet2_interface}}]=> {{inet2_network_ip}}
      {%- endif %}

# - name: Print /etc/hosts entries to be added
#   ansible.builtin.debug:
#     msg: >-
#       {{ item }}
#   loop: "{{ inet1_hosts_entries }}"
#   when: inet1_interface is defined and inet1_interface

- name: Update /etc/hosts for inet1
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR INET1"
    block: |
      {% for entry in inet1_hosts_entries %}
      {{ entry }}
      {% endfor %}
  when: inet1_interface is defined and inet1_interface

- name: Update /etc/hosts for inet2
  ansible.builtin.blockinfile:
    path: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR INET2"
    block: |
      {% for entry in inet2_hosts_entries %}
      {{ entry }}
      {% endfor %}
  when: inet2_interface is defined and inet2_interface

- name: Check internet access using custom/check_internet.yml
  include_tasks: custom/check_internet.yml
  when: ignore_internet_error is defined and ignore_internet_error is false

- name: Update package cache
  ansible.builtin.package:
    update_cache: yes
  become: true
  when: update_package_cache is true

- name: Upgrade all packages
  ansible.builtin.package:
    name: '*'
    # upgrade: yes
    state: latest
  become: true
  when: upgrade_all_packages is true

- name: Install common packages
  ansible.builtin.package:
    name: "{{ common_packages }}"
    state: present

- name: Install debian packages
  ansible.builtin.package:
    name: chrony
    state: present
  when: ansible_hostname in groups['debian']

- name: Install redhat family packages
  ansible.builtin.package:
    name: "{{ rpm_packages }}"
  when: ansible_facts['os_family'] == 'RedHat'

- name: Install redhat non-fedora packages
  ansible.builtin.package:
    name: "{{ rhel_packages }}"
  when:
    - ansible_facts['os_family'] == 'RedHat' and ansible_distribution != "Fedora"
    - rhel_packages is defined

- name: Install Fedora-specific packages
  ansible.builtin.package:
    name: "{{ fedora_packages }}"
  when: ansible_distribution == "Fedora"

- name: Enable and start chrony service
  ansible.builtin.systemd:
    name: chrony
    enabled: true
    state: started
  when: ansible_hostname in groups['debian']

- name: Check if server is joined to domain
  ansible.builtin.command: realm discover {{ ad_domain }}
  register: result_realm_discover

# - name: Debug variable result_realm_discover.stdout_lines
#   ansible.builtin.debug:
#     var: result_realm_discover.stdout_lines

- name: Extract domain name from realm list output
  ansible.builtin.set_fact:
    discovered_ad_domain: "{{ (result_realm_discover.stdout_lines | select('search', 'domain-name:') | first) | regex_replace('^.*domain-name: (.*)$', '\\1') }}"
  when: result_realm_discover is defined

- name: Extract if ad is configured already
  ansible.builtin.set_fact:
    domain_configured: "{{ (result_realm_discover.stdout_lines | select('search', 'configured:') | first) | regex_replace('^.*configured: (.*)$', '\\1') }}"
  when: result_realm_discover is defined

- name: Check if AD is already configured
  ansible.builtin.set_fact:
    joined_to_domain: "{{ domain_configured | lower not in ['no', 'false'] }}"
  when: domain_configured is defined

- name: Print the realm discover info
  debug:
    msg: "Domain: {{ discovered_ad_domain }} || Configured: {{ domain_configured }} || Joined: {{ joined_to_domain }}"

# - name: Join the machine to AD
#   ansible.builtin.expect:
#     command: >-
#       sudo realm join -v --user={{ AD_ADMINISTRATOR }} {{ ad_domain }}
#     responses:
#       Password for {{ AD_ADMINISTRATOR }}: "{{ AD_ADMINISTRATOR_PASSWORD }}"

- name: Join machines to AD
  shell:
    "echo '{{ AD_ADMINISTRATOR_PASSWORD }}' | sudo realm join --user={{ AD_ADMINISTRATOR }} {{ ad_domain }}"
  register: result_join_domain
  when: joined_to_domain is false

  # if above command does not work, then try "dig lab.com", and check the ANSWER SECTION reflect correct domain controller ips
    # rectify the issues of /etc/resolv.conf if required


- name: On Debian machines, Enable Home Directory
  become: true
  ansible.builtin.command:
    cmd: >-
      pam-auth-update --enable mkhomedir
  register: result_pam_auth_update
  when: ansible_hostname in groups['debian']

- name: On Redhat machines, Enable Home Directory
  become: true
  ansible.builtin.command:
    cmd: >-
      authselect select sssd with-mkhomedir --force
  register: result_authselect_mkhomedir
  when: ansible_hostname in groups['rhel']

- name: "Permit [{{dba_ad_group}}@{{ad_domain}}] group for access"
  become: true
  ansible.builtin.command:
    cmd: realm permit -g {{dba_ad_group}}@{{ad_domain}}
    # cmd: realm permit --all
  register: result_realm_permit

- name: End tasks/main.yml
  ansible.builtin.debug:
    msg: "End tasks/main.yml"